package com.madgag.wordle

import com.madgag.wordle.Evidence.evidenceFrom
import org.scalatest.Inspectors
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec
import com.madgag.wordle.LetterFeedback.*
import com.madgag.wordle.WordFeedback.feedbackFor

class WordFeedbackTest extends AnyWordSpec with Matchers {
  "WordFeedback" should {
    "represent the 5 letter-feedback values we get on a Wordle word" in {
      WordFeedback(Correct, Misplaced, Incorrect, Incorrect, Incorrect).emojis shouldBe "ğŸŸ©ğŸŸ¨â¬œâ¬œâ¬œ"
      WordFeedback(Correct, Correct,   Correct,   Correct,   Incorrect).emojis shouldBe "ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©â¬œ"
    }

    "round-trip emoji representation" in {
      WordFeedback("â¬œğŸŸ¨â¬œğŸŸ©â¬œ").emojis shouldBe "â¬œğŸŸ¨â¬œğŸŸ©â¬œ"
      WordFeedback("ğŸŸ©â¬œâ¬œâ¬œğŸŸ¨").emojis shouldBe "ğŸŸ©â¬œâ¬œâ¬œğŸŸ¨"
      WordFeedback("ğŸŸ©ğŸŸ©â¬œğŸŸ¨â¬œ").emojis shouldBe "ğŸŸ©ğŸŸ©â¬œğŸŸ¨â¬œ"
    }

    "round-trip from a sequence of letter-feedback values to a single-byte representation" in {
      val justOneGreenAtStart = Seq(Correct, Incorrect, Incorrect, Incorrect, Incorrect)
      WordFeedback(justOneGreenAtStart).toSeq shouldBe justOneGreenAtStart

      val justTwoYellowAtStart = Seq(Misplaced, Misplaced, Incorrect, Incorrect, Incorrect)
      WordFeedback(justTwoYellowAtStart).toSeq shouldBe justTwoYellowAtStart
    }

    "have a convenient 'success' value" in {
      WordFeedback.CompleteSuccess.emojis shouldBe "ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©ğŸŸ©"
    }

    "calculate feedback for a candidate against a target word!" in {
      feedbackFor("sassy", "grass").emojis shouldBe "ğŸŸ¨ğŸŸ¨â¬œğŸŸ©â¬œ"
    }

    "correctly handle multiple mis-placements of the same letter" in {
      feedbackFor("aarst", "xyzaa").emojis shouldBe "ğŸŸ¨ğŸŸ¨â¬œâ¬œâ¬œ"

      feedbackFor("teeth", "ether").emojis shouldBe "ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œğŸŸ¨"
      feedbackFor("ether", "teeth").emojis shouldBe "ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨â¬œ"

      feedbackFor("aabbc", "bbcaa").emojis shouldBe "ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨"
      feedbackFor("bbcaa", "aabbc").emojis shouldBe "ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨ğŸŸ¨"
    }

    "correctly calculate expected word-feedback for candidate words against a target word" in {
      for ((candidateWord, expectedFeedback) <- Seq(
        "RAISE" -> "ğŸŸ¨â¬œâ¬œâ¬œğŸŸ¨",
        "PRANK" -> "ğŸŸ©ğŸŸ¨â¬œâ¬œğŸŸ¨",
        "FRANK" -> "â¬œğŸŸ¨â¬œâ¬œğŸŸ¨",
        "DAILY" -> "â¬œâ¬œâ¬œâ¬œğŸŸ©",
        "WORTH" -> "â¬œâ¬œğŸŸ©â¬œâ¬œ",
        "SHIFT" -> "â¬œâ¬œâ¬œâ¬œâ¬œ"
      )) {
        feedbackFor(candidateWord, "PERKY").emojis shouldBe expectedFeedback
      }
    }

    "do examples found in http://sonorouschocolate.com/notes/index.php?title=The_best_strategies_for_Wordle" in {
      feedbackFor("SILLY", "HOTEL").emojis shouldBe "â¬œâ¬œğŸŸ¨â¬œâ¬œ"
      feedbackFor("SILLY", "DAILY").emojis shouldBe "â¬œğŸŸ¨â¬œğŸŸ©ğŸŸ©"
    }

    "be useful in working out what words are possible" in {
      val corpus = Corpus.Full
      val firstGuess = "early"
      val feedbackForFirstGuess = WordFeedback("ğŸŸ¨â¬œâ¬œğŸŸ©â¬œ")

      val wordsThatWouldGiveIdenticalFeedback: Set[Word] = corpus.commonWords.filter(possibleWord =>
        feedbackFor(firstGuess, possibleWord) == feedbackForFirstGuess
      )

      wordsThatWouldGiveIdenticalFeedback.size shouldBe 30
    }
  }
}