package com.madgag.wordle

import com.madgag.wordle.Evidence.evidenceFrom
import org.scalatest.Inspectors
import org.scalatest.matchers.should.Matchers
import org.scalatest.wordspec.AnyWordSpec
import com.madgag.wordle.LetterFeedback.*
import com.madgag.wordle.WordFeedback.feedbackFor

class WordFeedbackTest extends AnyWordSpec with Matchers {
  "WordFeedback" should {
    "recognise success" in {
      WordFeedback.CompleteSuccess.emojis shouldBe "ðŸŸ©ðŸŸ©ðŸŸ©ðŸŸ©ðŸŸ©"

      WordFeedback(Correct, Misplaced, Incorrect, Incorrect, Incorrect).emojis shouldBe "ðŸŸ©ðŸŸ¨â¬œâ¬œâ¬œ"
      WordFeedback(Correct, Correct, Correct, Correct, Incorrect).emojis shouldBe "ðŸŸ©ðŸŸ©ðŸŸ©ðŸŸ©â¬œ"
      WordFeedback("â¬œðŸŸ¨â¬œðŸŸ©â¬œ").emojis shouldBe "â¬œðŸŸ¨â¬œðŸŸ©â¬œ"
      WordFeedback("ðŸŸ©â¬œâ¬œâ¬œðŸŸ¨").emojis shouldBe "ðŸŸ©â¬œâ¬œâ¬œðŸŸ¨"
    }

    "roundtrip" in {
      val justGreenAtStart = Seq(Correct, Incorrect, Incorrect, Incorrect, Incorrect)
      WordFeedback(justGreenAtStart).toSeq shouldBe justGreenAtStart

      val justTwoYellowAtStart = Seq(Misplaced, Misplaced, Incorrect, Incorrect, Incorrect)
      WordFeedback(justTwoYellowAtStart).toSeq shouldBe justTwoYellowAtStart
    }

    "give good feedback on target word 'PERKY'" in {
      for ((candidateWord, expectedFeedback) <- Seq(
        "RAISE" -> "ðŸŸ¨â¬œâ¬œâ¬œðŸŸ¨",
        "PRANK" -> "ðŸŸ©ðŸŸ¨â¬œâ¬œðŸŸ¨",
        "FRANK" -> "â¬œðŸŸ¨â¬œâ¬œðŸŸ¨",
        "DAILY" -> "â¬œâ¬œâ¬œâ¬œðŸŸ©",
        "WORTH" -> "â¬œâ¬œðŸŸ©â¬œâ¬œ",
        "SHIFT" -> "â¬œâ¬œâ¬œâ¬œâ¬œ"
      )) {
        feedbackFor(candidateWord, "PERKY").emojis shouldBe expectedFeedback
      }
    }

    "do examples found in http://sonorouschocolate.com/notes/index.php?title=The_best_strategies_for_Wordle" in {
      feedbackFor("SILLY", "HOTEL").emojis shouldBe "â¬œâ¬œðŸŸ¨â¬œâ¬œ"
      feedbackFor("SILLY", "DAILY").emojis shouldBe "â¬œðŸŸ¨â¬œðŸŸ©ðŸŸ©"
    }
  }
}